%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - mcfunction
scope: source.mcfunction

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: tags_with_states
    - include: resource_locations_with_states
    - include: selectors
    - include: coordinates
    - include: uuids
    - include: number_ranges
    - include: numbers
    - include: boolean_values
    - include: negation
    - include: strings
    - include: nbt_data

  keywords:
    # Command names
    - match: '\b(advancement|attribute|bossbar|clear|clone|damage|data|datapack|debug|defaultgamemode|difficulty|effect|enchant|execute|experience|fill|fillbiome|forceload|function|gamemode|gamerule|give|help|item|jfr|kick|kill|list|locate|loot|me|msg|particle|place|playsound|random|recipe|reload|return|ride|rotate|say|schedule|scoreboard|seed|setblock|setworldspawn|spawnpoint|spectate|spreadplayers|stopsound|summon|tag|team|teammsg|teleport|tell|tellraw|test|tick|time|title|tm|tp|trigger|w|weather|worldborder|xp)\b'
      scope: keyword.command.mcfunction

  # Tags with states (like #minecraft:leaves[distance=5, persistent=false])
  tags_with_states:
    - match: '(?<!^)(#[a-z0-9_.-]+:[a-z0-9_/.-]+)'
      scope: entity.name.tag.mcfunction
      push:
        - match: '\['
          scope: punctuation.section.brackets.begin.blockstate.mcfunction
          push: block_state_arguments
        - match: '(?=\s|$|[^#a-z0-9_.-:\[])'
          pop: true

  # Plain tags without state handling
  tags:
    - match: '(?<!^)(#[a-z0-9_.-]+:[a-z0-9_/.-]+)'
      scope: entity.name.tag.mcfunction

  # Resource locations (like minecraft:oak_log) with block states
  resource_locations_with_states:
    - match: '(?<![#@])([a-z0-9_.-]+:[a-z0-9_/.-]+)'
      scope: string.unquoted.resource.mcfunction
      push:
        - match: '\['
          scope: punctuation.section.brackets.begin.blockstate.mcfunction
          push: block_state_arguments
        - match: '(?=\s|$|[^a-z0-9_.-:\[])'
          pop: true

  # Just the plain resource locations without state handling
  resource_locations:
    - match: '(?<![#@])([a-z0-9_.-]+:[a-z0-9_/.-]+)'
      scope: string.unquoted.resource.mcfunction

  block_state_arguments:
    - meta_content_scope: meta.blockstate.arguments.mcfunction
    # Match argument names and equals sign separately
    - match: '([a-z_][a-z0-9_]*)(=)'
      captures:
        1: entity.other.attribute-name.blockstate.mcfunction
        2: keyword.operator.assignment.mcfunction
    # Support for comma separators in block states
    - match: ','
      scope: punctuation.separator.blockstate.mcfunction
    - include: resource_locations
    - include: coordinates
    - include: uuids
    - include: number_ranges
    - include: numbers
    - include: boolean_values
    - include: negation
    - include: strings
    - include: nbt_data
    - match: '\]'
      scope: punctuation.section.brackets.end.blockstate.mcfunction
      pop: true

  selectors:
    - match: '@(p|r|a|e|s|n)'
      scope: variable.language.selector.mcfunction
      push:
        - match: '\['
          scope: variable.language.selector.mcfunction
          push: selector_arguments
        - match: '(?=\s|$|[^@\[])'
          pop: true

  selector_arguments:
    - meta_content_scope: meta.selector.arguments.mcfunction
    # Match argument names and equals sign separately
    - match: '([a-z_][a-z0-9_]*)(=)'
      captures:
        1: entity.other.attribute-name.selector.mcfunction
        2: keyword.operator.assignment.mcfunction
    # Support for comma separators in selectors
    - match: ','
      scope: punctuation.separator.selector.mcfunction
    - include: resource_locations
    - include: tags
    - include: coordinates
    - include: uuids
    - include: number_ranges
    - include: numbers
    - include: boolean_values
    - include: negation
    - include: strings
    - include: nbt_data
    - match: '\]'
      scope: variable.language.selector.mcfunction
      pop: true

  # UUID highlighting patterns
  uuids:
    # Standard UUID format (f7a39418-72ca-4bf2-bc7e-ba9df67a4707)
    - match: '\b([0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12})\b'
      scope: constant.other.uuid.mcfunction
    # Numerical UUID format (0-0-0-0-0)
    - match: '\b(\d+-\d+-\d+-\d+-\d+)\b'
      scope: constant.other.uuid.mcfunction

  # Coordinates (~ and ^ prefixed numbers)
  coordinates:
    # Relative coordinates (~)
    - match: '(~)(-?[0-9]*\.?[0-9]*)'
      scope: constant.numeric.coordinate.relative.mcfunction
      captures:
        1: keyword.operator.coordinate.relative.mcfunction

    # Local coordinates (^)
    - match: '(\^)(-?[0-9]*\.?[0-9]*)'
      scope: constant.numeric.coordinate.local.mcfunction
      captures:
        1: keyword.operator.coordinate.local.mcfunction

  number_ranges:
    # Match full ranges (e.g. 5..10)
    - match: '\b(-?[0-9]+(\.[0-9]+)?)\s*(\.\.)\s*(-?[0-9]+(\.[0-9]+)?)\b'
      scope: constant.numeric.range.mcfunction
      captures:
        1: constant.numeric.value.mcfunction
        3: keyword.operator.range.mcfunction
        4: constant.numeric.value.mcfunction

    # Match lower-bounded ranges (e.g. 10..)
    - match: '\b(-?[0-9]+(\.[0-9]+)?)\s*(\.\.)\s*(?![0-9])'
      scope: constant.numeric.range.mcfunction
      captures:
        1: constant.numeric.value.mcfunction
        3: keyword.operator.range.mcfunction

    # Match upper-bounded ranges (e.g. ..10)
    - match: '(?<![0-9])\s*(\.\.)\s*(-?[0-9]+(\.[0-9]+)?)\b'
      scope: constant.numeric.range.mcfunction
      captures:
        1: keyword.operator.range.mcfunction
        2: constant.numeric.value.mcfunction

  numbers:
    # More specific number matching to avoid capturing within words
    - match: '(?<![a-zA-Z0-9_.-])(-?[0-9]+(\.[0-9]+)?)(?![a-zA-Z0-9_.-])'
      scope: constant.numeric.mcfunction

  # Boolean values (true/false)
  boolean_values:
    - match: '\b(true|false)\b'
      scope: constant.language.boolean.mcfunction

  # Negation operator
  negation:
    - match: '!'
      scope: keyword.operator.logical.negation.mcfunction

  strings:
    # Double quoted strings
    - match: '"'
      scope: punctuation.definition.string.begin.mcfunction
      push:
        - meta_scope: string.quoted.double.mcfunction
        - match: '\\.'
          scope: constant.character.escape.mcfunction
        - match: '"'
          scope: punctuation.definition.string.end.mcfunction
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.mcfunction
          pop: true

    # Single quoted strings (used in NBT data)
    - match: "'"
      scope: punctuation.definition.string.begin.nbt.mcfunction
      push:
        - meta_scope: string.quoted.single.nbt.mcfunction
        - match: '\\.'
          scope: constant.character.escape.mcfunction
        - match: "'"
          scope: punctuation.definition.string.end.nbt.mcfunction
          pop: true
        - match: $\n?
          scope: invalid.illegal.unclosed-string.mcfunction
          pop: true

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.mcfunction
    - match: '\\.'
      scope: constant.character.escape.mcfunction
    - match: '"'
      scope: punctuation.definition.string.end.mcfunction
      pop: true

  comments:
    # Block comments with special header (documentation style)
    - match: ^\s*(#>.*)$
      scope: comment.block.documentation.header.mcfunction
      push:
        - meta_scope: comment.block.documentation.mcfunction
        # Match continuation lines that start with # (with optional whitespace)
        - match: ^\s*(#(?!>).*)$
          scope: comment.block.documentation.content.mcfunction
        # Exit the block comment when we hit a non-comment line or another header
        - match: ^(?!\s*#|\s*$)
          pop: true
        - match: ^\s*(#>)
          pop: true

    # Regular line comments (only at start of line with optional whitespace)
    - match: ^\s*#.*$
      scope: comment.line.mcfunction

  # NBT data highlighting
  nbt_data:
    - match: '{'
      scope: punctuation.section.braces.begin.nbt.mcfunction
      push:
        - meta_scope: meta.nbt.mcfunction
        - match: '}'
          scope: punctuation.section.braces.end.nbt.mcfunction
          pop: true
        - include: nbt_content

  nbt_content:
    # Match key names and colons in NBT
    - match: '([a-zA-Z0-9_]+)(:)'
      captures:
        1: entity.name.tag.nbt.mcfunction
        2: punctuation.separator.key-value.nbt.mcfunction
    # Match data types
    - match: '\b(true|false)\b'
      scope: constant.language.boolean.nbt.mcfunction
    - match: '\b[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)f\b'
      scope: constant.numeric.float.nbt.mcfunction
    - match: '\b[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)d\b'
      scope: constant.numeric.double.nbt.mcfunction
    - match: '\b[+-]?[0-9]+b\b'
      scope: constant.numeric.byte.nbt.mcfunction
    - match: '\b[+-]?[0-9]+s\b'
      scope: constant.numeric.short.nbt.mcfunction
    - match: '\b[+-]?[0-9]+l\b'
      scope: constant.numeric.long.nbt.mcfunction
    # UUID support in NBT
    - include: uuids
    # Arrays
    - match: '\['
      scope: punctuation.section.brackets.begin.nbt.mcfunction
      push:
        - meta_scope: meta.array.nbt.mcfunction
        - match: '\]'
          scope: punctuation.section.brackets.end.nbt.mcfunction
          pop: true
        - include: nbt_content
    # Recursive NBT objects
    - match: '{'
      scope: punctuation.section.braces.begin.nbt.mcfunction
      push:
        - meta_scope: meta.nbt.mcfunction
        - match: '}'
          scope: punctuation.section.braces.end.nbt.mcfunction
          pop: true
        - include: nbt_content
    # Include existing patterns for strings, etc.
    - include: strings
    - include: number_ranges
    - include: numbers
    - include: boolean_values
    - include: negation
    - include: resource_locations