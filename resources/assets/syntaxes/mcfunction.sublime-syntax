%YAML 1.2
---
# See http://www.sublimetext.com/docs/3/syntax.html
file_extensions:
  - mcfunction
scope: source.mcfunction

contexts:
  # The prototype context is prepended to all contexts but those setting
  # meta_include_prototype: false.
  prototype:
    - include: comments

  main:
    # The main context is the initial starting point of our syntax.
    # Include other contexts from here (or specify them directly).
    - include: keywords
    - include: tags
    - include: resource_locations
    - include: selectors
    - include: coordinates
    - include: number_ranges
    - include: numbers
    - include: strings
    - include: nbt_data

  keywords:
    # Command names
    - match: '\b(advancement|attribute|bossbar|clear|clone|damage|data|datapack|debug|defaultgamemode|difficulty|effect|enchant|execute|experience|fill|fillbiome|forceload|function|gamemode|gamerule|give|help|item|jfr|kick|kill|list|locate|loot|me|msg|particle|place|playsound|random|recipe|reload|return|ride|rotate|say|schedule|scoreboard|seed|setblock|setworldspawn|spawnpoint|spectate|spreadplayers|stopsound|summon|tag|team|teammsg|teleport|tell|tellraw|test|tick|time|title|tm|tp|trigger|w|weather|worldborder|xp)\b'
      scope: keyword.command.mcfunction

  # Tags (like #minecraft:logs)
  tags:
    - match: '(?<!^)(#[a-z0-9_.-]+:[a-z0-9_/.-]+)'
      scope: entity.name.tag.mcfunction

  # Resource locations (like minecraft:oak_log)
  resource_locations:
    - match: '(?<![#@])([a-z0-9_.-]+:[a-z0-9_/.-]+)'
      scope: string.unquoted.resource.mcfunction

  selectors:
    - match: '@(p|r|a|e|s|n)'
      scope: variable.language.selector.mcfunction
      push:
        - match: '\['
          scope: variable.language.selector.mcfunction
          push: selector_arguments
        - match: '(?=\s|$|[^@\[])'
          pop: true

  selector_arguments:
    - meta_content_scope: meta.selector.arguments.mcfunction
    # Match argument names and equals sign separately
    - match: '([a-z_][a-z0-9_]*)(=)'
      captures:
        1: entity.other.attribute-name.selector.mcfunction
        2: keyword.operator.assignment.mcfunction
    - include: tags
    - include: resource_locations
    - include: coordinates
    - include: number_ranges
    - include: numbers
    - include: strings
    - include: nbt_data
    - match: '\]'
      scope: variable.language.selector.mcfunction
      pop: true

  # Coordinates (~ and ^ prefixed numbers)
  coordinates:
    # Relative coordinates (~)
    - match: '(~)(-?[0-9]*\.?[0-9]*)'
      scope: constant.numeric.coordinate.relative.mcfunction
      captures:
        1: keyword.operator.coordinate.relative.mcfunction

    # Local coordinates (^)
    - match: '(\^)(-?[0-9]*\.?[0-9]*)'
      scope: constant.numeric.coordinate.local.mcfunction
      captures:
        1: keyword.operator.coordinate.local.mcfunction

  number_ranges:
    - match: '(-?[0-9]+(\.[0-9]+)?)?(\.\.)(-?[0-9]+(\.[0-9]+)?)?'
      scope: constant.numeric.range.mcfunction
      captures:
        3: keyword.operator.range.mcfunction

  numbers:
    - match: '(?<!\.)(-?[0-9]+(\.[0-9]+)?)(?!\.\.|\.)'
      scope: constant.numeric.mcfunction

  strings:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character.
    - match: '"'
      scope: punctuation.definition.string.begin.mcfunction
      push: inside_string

  inside_string:
    - meta_include_prototype: false
    - meta_scope: string.quoted.double.mcfunction
    - match: '\\.'
      scope: constant.character.escape.mcfunction
    - match: '"'
      scope: punctuation.definition.string.end.mcfunction
      pop: true

  comments:
    # Comments begin with a # and finish at the end of the line.
    - match: '^\#'
      scope: punctuation.definition.comment.mcfunction
      push:
        # This is an anonymous context push for brevity.
        - meta_scope: comment.line.hash.mcfunction
        - match: $\n?
          pop: true

  # NBT data highlighting
  nbt_data:
    - match: '{'
      scope: punctuation.section.braces.begin.nbt.mcfunction
      push:
        - meta_scope: meta.nbt.mcfunction
        - match: '}'
          scope: punctuation.section.braces.end.nbt.mcfunction
          pop: true
        - include: nbt_content

  nbt_content:
    # Match key names and colons in NBT
    - match: '([a-zA-Z0-9_]+)(:)'
      captures:
        1: entity.name.tag.nbt.mcfunction
        2: punctuation.separator.key-value.nbt.mcfunction
    # Match data types
    - match: '\b(true|false)\b'
      scope: constant.language.boolean.nbt.mcfunction
    - match: '\b[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)f\b'
      scope: constant.numeric.float.nbt.mcfunction
    - match: '\b[+-]?([0-9]+([.][0-9]*)?|[.][0-9]+)d\b'
      scope: constant.numeric.double.nbt.mcfunction
    - match: '\b[+-]?[0-9]+b\b'
      scope: constant.numeric.byte.nbt.mcfunction
    - match: '\b[+-]?[0-9]+s\b'
      scope: constant.numeric.short.nbt.mcfunction
    - match: '\b[+-]?[0-9]+l\b'
      scope: constant.numeric.long.nbt.mcfunction
    # Arrays
    - match: '\['
      scope: punctuation.section.brackets.begin.nbt.mcfunction
      push:
        - meta_scope: meta.array.nbt.mcfunction
        - match: '\]'
          scope: punctuation.section.brackets.end.nbt.mcfunction
          pop: true
        - include: nbt_content
    # Recursive NBT objects
    - match: '{'
      scope: punctuation.section.braces.begin.nbt.mcfunction
      push:
        - meta_scope: meta.nbt.mcfunction
        - match: '}'
          scope: punctuation.section.braces.end.nbt.mcfunction
          pop: true
        - include: nbt_content
    # Include existing patterns for strings, etc.
    - include: strings
    - include: numbers
    - include: resource_locations